<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RPG de Piratas - Home</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Fundo escuro */
            color: #e2e8f0; /* Texto claro */
        }
        .container {
            background-color: #2d3748; /* Fundo do container mais claro */
            border-radius: 15px;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.5);
        }
        .btn-pirate {
            background-color: #e53e3e; /* Vermelho pirata */
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }
        .btn-pirate:hover {
            background-color: #c53030;
        }
        .hp-bar-container {
            width: 100%;
            background-color: #4a5568;
            border-radius: 5px;
            overflow: hidden;
            height: 20px;
            margin-top: 5px;
        }
        .hp-bar {
            height: 100%;
            background-color: #48bb78; /* Verde para HP */
            transition: width 0.5s ease-in-out;
        }
        .hp-bar.enemy {
            background-color: #e53e3e; /* Vermelho para HP do inimigo */
        }

        /* Estilos para o Inventário */
        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr); /* 5 colunas */
            gap: 10px;
            padding: 10px;
            border: 2px solid #4a5568;
            border-radius: 10px;
            background-color: #2d3748;
        }
        .inventory-slot {
            width: 80px; /* Tamanho do quadrado */
            height: 80px;
            background-color: #4a5568;
            border: 1px dashed #718096;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8em;
            color: #e2e8f0;
            overflow: hidden; /* Garante que o conteúdo não vaze */
        }
        .inventory-item {
            cursor: grab;
            background-color: #63b3ed; /* Cor do item */
            color: white;
            padding: 5px;
            border-radius: 3px;
            text-align: center;
            width: 90%;
            height: 90%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }
        .discard-area {
            background-color: #c53030; /* Vermelho para a lixeira */
            border: 2px dashed #e53e3e;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100px;
            color: white;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }
        .discard-area.drag-over {
            background-color: #a02020; /* Cor quando arrasta sobre */
        }

        /* --- Estilos do Chat (Novos ou Ajustados) --- */
        #chat-section {
            display: flex;
            flex-direction: column;
            background-color: #2d3748; /* Fundo do container do chat */
            border-radius: 15px;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.5);
            padding: 1rem;
            margin-top: 20px; /* Espaço entre o conteúdo principal e o chat */
            max-height: 300px; /* Altura máxima para o chat */
            overflow: hidden; /* Garante que a rolagem funcione no contêiner interno */
        }
        #messages {
            flex-grow: 1; /* Faz a lista de mensagens ocupar o espaço disponível */
            overflow-y: auto; /* Adiciona a rolagem vertical */
            padding: 0.5rem;
            list-style-type: none;
            margin: 0;
            background-color: #1a202c; /* Fundo das mensagens */
            border-radius: 8px;
            margin-bottom: 1rem;
            color: #e2e8f0;
        }
        #messages li {
            padding: 0.25rem 0;
            border-bottom: 1px solid #4a5568; /* Linha divisória para mensagens */
        }
        #messages li:last-child {
            border-bottom: none;
        }
        #chat-form {
            display: flex;
            gap: 0.5rem;
        }
        #chat-input {
            flex-grow: 1;
            padding: 0.75rem;
            border: 1px solid #4a5568;
            border-radius: 8px;
            background-color: #1a202c;
            color: #e2e8f0;
        }
        #chat-input::placeholder {
            color: #a0aec0;
        }
        #chat-button {
            background-color: #4299e1; /* Azul para o botão de chat */
            color: white;
            padding: 0.75rem 1.25rem;
            border-radius: 8px;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }
        #chat-button:hover {
            background-color: #3182ce;
        }

        /* NOVO: Estilos para mensagens de chat */
        .chat-message-admin {
            color: #f6e05e; /* Amarelo para admin */
            font-weight: bold;
        }
        .chat-message-system {
            color: #63b3ed; /* Azul claro para sistema */
            font-style: italic;
            font-weight: bold;
        }
        .chat-message-error {
            color: #e53e3e; /* Vermelho para erros */
            font-weight: bold;
        }

        /* --- Estilos de Habilidades (Novos) --- */
        .skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)); /* Colunas responsivas */
            gap: 15px;
            padding: 15px;
            border: 2px solid #4a5568;
            border-radius: 10px;
            background-color: #2d3748;
            min-height: 200px;
            max-height: 400px;
            overflow-y: auto;
        }
        .skill-card {
            background-color: #4a5568;
            border-radius: 8px;
            padding: 15px;
            text-align: left;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            border: 1px solid transparent; /* Para o hover */
        }
        .skill-card.learned {
            border-color: #48bb78; /* Borda verde para habilidades aprendidas */
        }
        .skill-card.active {
            border-color: #63b3ed; /* Borda azul para habilidades ativas */
            box-shadow: 0 0 10px rgba(99, 179, 237, 0.7);
        }
        .skill-card h4 {
            font-weight: bold;
            color: #f6e05e; /* Amarelo para nome da skill */
            margin-bottom: 5px;
        }
        .skill-card p {
            font-size: 0.9em;
            color: #cbd5e0;
            margin-bottom: 5px;
        }
        .skill-card .skill-level {
            font-size: 0.8em;
            color: #a0aec0;
            margin-bottom: 10px;
        }
        .skill-card button {
            background-color: #4299e1;
            color: white;
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.85em;
            cursor: pointer;
            transition: background-color 0.2s;
            width: 100%;
        }
        .skill-card button:hover:not(:disabled) {
            background-color: #3182ce;
        }
        .skill-card button:disabled {
            background-color: #718096;
            cursor: not-allowed;
        }

        .active-skills-slots {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            padding: 15px;
            border: 2px dashed #a0aec0;
            border-radius: 10px;
            background-color: #1a202c;
        }
        .active-skill-slot {
            width: 120px;
            height: 120px;
            background-color: #4a5568;
            border: 2px solid #63b3ed;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 0.9em;
            color: #e2e8f0;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        .active-skill-slot.drag-over {
            background-color: #3182ce;
            border-color: #4299e1;
        }
        .active-skill-slot .skill-name {
            font-weight: bold;
            color: #f6e05e;
            margin-bottom: 5px;
        }
        .active-skill-slot .remove-skill-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #e53e3e;
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 0.7em;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .active-skill-slot .remove-skill-btn:hover {
            background-color: #c53030;
        }
        /* Style for skill buttons in battle */
        .skill-battle-btn {
            background-color: #4299e1;
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-weight: bold;
            transition: background-color 0.3s ease;
            cursor: pointer;
        }
        .skill-battle-btn:hover:not(:disabled) {
            background-color: #3182ce;
        }
        .skill-battle-btn:disabled {
            background-color: #718096;
            cursor: not-allowed;
            opacity: 0.6;
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">
    <div id="main-content-wrapper" class="flex flex-col w-full max-w-2xl">
        <div id="home-section" class="container w-full p-8 text-center <%= battleState || inventoryState || skillsState || statusState ? 'hidden' : '' %>">
            <h1 class="text-4xl font-bold mb-6 text-yellow-400">Bem-vindo, Capitão <%= userName %>!</h1>
            
            <div class="flex flex-col items-center mb-8">
                <img src="https://placehold.co/200x200/3182ce/ffffff?text=<%= character.type %>" alt="Seu <%= character.type %>" class="rounded-full border-4 border-yellow-500 mb-4 shadow-lg">
                <p class="text-2xl font-semibold text-green-400">Nível: <span class="text-white" id="character-level"><%= character.level %></span></p>
                <p class="text-lg text-gray-300">Classe: <span class="text-white"><%= character.class %></span></p>
                <p class="text-lg text-yellow-300">Ouro: <span class="text-white" id="character-gold"><%= character.gold %></span></p>
                <p class="text-lg text-blue-300">Dinheiro: <span class="text-white" id="character-cash"><%= character.cash %></span></p>
                <p class="text-lg text-purple-300">VIP: <span class="text-white" id="character-vip"><%= character.vip ? 'Ativado' : 'Desativado' %></span></p>
                <p class="text-lg text-orange-300">Fruta Ativa: <span class="text-white" id="character-active-fruit"><%= character.activeFruit ? character.activeFruit : 'Nenhuma' %></span></p>
            </div>

            <p class="text-lg mb-8">Sua aventura pelos sete mares começa agora! Prepare-se para desafios, tesouros e glória!</p>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <button id="show-skills-btn" class="btn-pirate">Habilidades</button>
                <button id="start-battle-btn" class="btn-pirate">Batalha Naval</button>
                <button class="btn-pirate">Gerenciar Tripulação</button>
                <button id="show-inventory-btn" class="btn-pirate">Inventário</button>
                <button id="show-status-btn" class="btn-pirate">Status</button>
            </div>

            <div class="mt-8">
                <a href="/logout" class="text-blue-400 hover:underline">Sair (Logout)</a>
            </div>
        </div>

        <div id="battle-section" class="container w-full p-8 text-center <%= battleState ? '' : 'hidden' %>">
            <h2 class="text-3xl font-bold mb-4 text-red-400">Batalha!</h2>

            <div class="mb-6">
                <h3 class="text-2xl font-semibold text-gray-300" id="enemy-name"></h3>
                <p class="text-lg text-gray-400">Nível: <span id="enemy-level"></span></p>
                <div class="hp-bar-container">
                    <div id="enemy-hp-bar" class="hp-bar enemy" style="width: 100%;"></div>
                </div>
                <p class="text-lg text-gray-400">HP: <span id="enemy-hp"></span></p>
                <img src="https://placehold.co/150x150/8B4513/ffffff?text=Orc" alt="Orc Pirata" class="mx-auto my-4 rounded-lg">
            </div>

            <div class="mb-6">
                <h3 class="text-2xl font-semibold text-blue-300">Você</h3>
                <div class="hp-bar-container">
                    <div id="player-hp-bar" class="hp-bar" style="width: 100%;"></div>
                </div>
                <p class="text-lg text-gray-400">HP: <span id="player-hp"></span></p>
            </div>

            <div class="mb-6">
                <div id="active-battle-skills" class="flex justify-center gap-4 mb-4">
                    </div>
                <button id="flee-battle-btn" class="btn-pirate bg-yellow-600 hover:bg-yellow-700 w-full mb-4 hidden">Fugir da Batalha</button>
                <div id="battle-log" class="bg-gray-700 p-4 rounded-lg text-left h-40 overflow-y-auto">
                    </div>
            </div>

            <div class="hidden" id="battle-result">
                <h3 class="text-2xl font-bold mb-4" id="result-message"></h3>
                </div>
        </div>

        <div id="inventory-section" class="container w-full p-8 text-center <%= inventoryState ? '' : 'hidden' %>">
            <h2 class="text-3xl font-bold mb-6 text-yellow-400">Seu Inventário</h2>
            
            <div id="inventory-grid" class="inventory-grid mb-6">
                </div>

            <div id="discard-area" class="discard-area">
                Arrastar itens aqui para descartar
            </div>

            <div class="mt-8">
                <button id="return-home-from-inventory-btn" class="btn-pirate w-full">Voltar para Casa</button>
            </div>
        </div>

        <div id="skills-section" class="container w-full p-8 text-center <%= skillsState ? '' : 'hidden' %>">
            <h2 class="text-3xl font-bold mb-6 text-yellow-400">Suas Habilidades</h2>

            <h3 class="text-xl font-semibold mb-3 text-blue-300">Habilidades Ativas (Máx. 2)</h3>
            <div id="active-skills-slots" class="active-skills-slots mb-6">
                <div class="active-skill-slot" data-slot-index="0">
                    Arrastar habilidade aqui
                </div>
                <div class="active-skill-slot" data-slot-index="1">
                    Arrastar habilidade aqui
                </div>
            </div>

            <h3 class="text-xl font-semibold mb-3 text-green-300">Habilidades Aprendidas</h3>
            <div id="learned-skills-grid" class="skills-grid mb-6">
                </div>

            <h3 class="text-xl font-semibold mb-3 text-gray-300">Habilidades Disponíveis (para sua classe)</h3>
            <div id="available-skills-grid" class="skills-grid">
                </div>

            <div class="mt-8">
                <button id="return-home-from-skills-btn" class="btn-pirate w-full">Voltar para Casa</button>
            </div>
        </div>

        <div id="chat-section" class="w-full max-w-2xl">
            <h2 class="text-2xl font-bold mb-4 text-blue-300">Chat Global</h2>
            <ul id="messages" class="h-48 overflow-y-auto bg-gray-700 p-4 rounded-lg mb-4">
                </ul>
            <form id="chat-form" class="flex gap-2">
                <input id="chat-input" type="text" autocomplete="off" placeholder="Digite sua mensagem..." class="flex-grow p-2 rounded-lg bg-gray-800 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                <button type="submit" id="chat-button" class="btn-pirate bg-blue-600 hover:bg-blue-700">Enviar</button>
            </form>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            console.log("DOM Content Loaded. Initializing UI.");

            const homeSection = document.getElementById('home-section');
            const battleSection = document.getElementById('battle-section');
            const inventorySection = document.getElementById('inventory-section');
            const skillsSection = document.getElementById('skills-section');
            // A seção de status não existe diretamente no home.ejs, mas a variável statusState é usada para controlar a visibilidade da home
            // const statusSection = document.getElementById('status-section'); 

            const showSkillsBtn = document.getElementById('show-skills-btn');
            const startBattleBtn = document.getElementById('start-battle-btn');
            const showInventoryBtn = document.getElementById('show-inventory-btn');
            const showStatusBtn = document.getElementById('show-status-btn'); 

            const fleeBattleBtn = document.getElementById('flee-battle-btn');
            const returnHomeFromInventoryBtn = document.getElementById('return-home-from-inventory-btn');
            const returnHomeFromSkillsBtn = document.getElementById('return-home-from-skills-btn');

            const enemyNameEl = document.getElementById('enemy-name');
            const enemyLevelEl = document.getElementById('enemy-level');
            const enemyHpBarEl = document.getElementById('enemy-hp-bar');
            const enemyHpEl = document.getElementById('enemy-hp');
            const playerHpBarEl = document.getElementById('player-hp-bar');
            const playerHpEl = document.getElementById('player-hp');
            const battleLogEl = document.getElementById('battle-log');
            const battleResultEl = document.getElementById('battle-result');
            const resultMessageEl = document.getElementById('result-message');
            const characterLevelEl = document.getElementById('character-level');
            // Referências para Gold e Cash
            const characterGoldEl = document.getElementById('character-gold');
            const characterCashEl = document.getElementById('character-cash');
            // NOVO: Referências para VIP e Fruta Ativa
            const characterVipEl = document.getElementById('character-vip');
            const characterActiveFruitEl = document.getElementById('character-active-fruit');
            
            const inventoryGridEl = document.getElementById('inventory-grid');
            const discardAreaEl = document.getElementById('discard-area');

            // --- Elementos da Seção de Habilidades ---
            const learnedSkillsGridEl = document.getElementById('learned-skills-grid');
            const availableSkillsGridEl = document.getElementById('available-skills-grid');
            const activeSkillsSlotsEl = document.getElementById('active-skills-slots');
            const activeBattleSkillsEl = document.getElementById('active-battle-skills');

            // --- Código do Chat ---
            const socket = io();
            const chatMessagesEl = document.getElementById('messages');
            const chatFormEl = document.getElementById('chat-form');
            const chatInputEl = document.getElementById('chat-input');
            const currentUserName = "<%= userName %>";

            chatFormEl.addEventListener('submit', (e) => {
                e.preventDefault();
                if (chatInputEl.value) {
                    socket.emit('chat message', chatInputEl.value); // Envia apenas o conteúdo da mensagem
                    chatInputEl.value = '';
                }
            });

            // NOVO: Recebe um objeto com informações da mensagem
            socket.on('chat message', (msgData) => {
                const item = document.createElement('li');
                let messageText = `${msgData.sender}: ${msgData.message}`;
                
                if (msgData.isAdmin) {
                    item.classList.add('chat-message-admin');
                } else if (msgData.isSystem) {
                    item.classList.add('chat-message-system');
                    messageText = `SISTEMA: ${msgData.message}`; // Formata para mensagens do sistema
                }
                
                item.textContent = messageText;
                chatMessagesEl.appendChild(item);
                chatMessagesEl.scrollTop = chatMessagesEl.scrollHeight;
            });

            // NOVO: Lida com erros do chat (ex: rate limit)
            socket.on('chat error', (errorMessage) => {
                const item = document.createElement('li');
                item.classList.add('chat-message-error');
                item.textContent = `ERRO: ${errorMessage}`;
                chatMessagesEl.appendChild(item);
                chatMessagesEl.scrollTop = chatMessagesEl.scrollHeight;
            });
            // --- Fim do Código do Chat ---

            // Dados iniciais passados pelo servidor
            let characterData = JSON.parse('<%- JSON.stringify(character) %>');
            let allSkillsData = JSON.parse('<%- JSON.stringify(allSkills) %>');
            let currentUserInventory = characterData.inventory || [];

            const INVENTORY_LIMIT = 20;
            const ACTIVE_SKILLS_LIMIT = 2;

            // Função para atualizar a interface E gerenciar a visibilidade das seções
            function updateUI(battleState, inventoryState, skillsState, statusState) {
                console.log("updateUI called. Battle State:", battleState, "Inventory State:", inventoryState, "Skills State:", skillsState, "Status State:", statusState);
                
                homeSection.classList.add('hidden');
                battleSection.classList.add('hidden');
                inventorySection.classList.add('hidden');
                skillsSection.classList.add('hidden');

                if (battleState && battleState.status === "active") {
                    console.log("Showing Battle Section.");
                    battleSection.classList.remove('hidden');
                    enemyNameEl.textContent = battleState.enemyName;
                    enemyLevelEl.textContent = battleState.enemyLevel;
                    enemyHpEl.textContent = battleState.enemyHP;
                    enemyHpBarEl.style.width = `${Math.max(0, (battleState.enemyHP / 100) * 100)}%`; 

                    playerHpEl.textContent = characterData.hp; // Usa o HP atualizado do characterData
                    playerHpBarEl.style.width = `${Math.max(0, (characterData.hp / characterData.maxHp) * 100)}%`;

                    battleLogEl.innerHTML = '';
                    battleState.battleLog.forEach(log => {
                        const p = document.createElement('p');
                        p.textContent = log;
                        battleLogEl.appendChild(p);
                    });
                    battleLogEl.scrollTop = battleLogEl.scrollHeight;

                    battleResultEl.classList.add('hidden');
                    activeBattleSkillsEl.classList.remove('hidden');
                    fleeBattleBtn.classList.remove('hidden');

                    updateActiveBattleSkillsUI();
                } else if (battleState && (battleState.status === "win" || battleState.status === "lose")) {
                    resultMessageEl.textContent = battleState.status === "win" ? "VITÓRIA! Você derrotou o Orc!" : "DERROTA! Você foi nocauteado!";
                    resultMessageEl.classList.remove('text-red-500', 'text-green-500');
                    resultMessageEl.classList.add(battleState.status === "win" ? 'text-green-500' : 'text-red-500');
                    
                    if (battleState.status === "win" && battleState.battleLog.length > 0) {
                        const droppedItemLog = battleState.battleLog.find(log => log.includes("Você encontrou uma"));
                        if (droppedItemLog) {
                            resultMessageEl.innerHTML += `<br><span class="text-yellow-300">${droppedItemLog}</span>`;
                        }
                    }

                    battleResultEl.classList.remove('hidden');
                    activeBattleSkillsEl.classList.add('hidden');
                    fleeBattleBtn.classList.add('hidden');

                    battleSection.classList.remove('hidden');
                    homeSection.classList.add('hidden');

                    setTimeout(() => {
                        console.log("Redirecionando para a página inicial após o resultado da batalha.");
                        window.location.href = '/home';
                    }, 3000);
                } else if (inventoryState) {
                    console.log("Showing Inventory Section. Calling updateInventoryUI.");
                    inventorySection.classList.remove('hidden');
                    updateInventoryUI();
                } else if (skillsState) {
                    console.log("Showing Skills Section. Calling updateSkillsUI.");
                    skillsSection.classList.remove('hidden');
                    updateSkillsUI();
                } else if (statusState) { 
                    console.log("Showing Status Section (via separate EJS). Hiding home.");
                    homeSection.classList.add('hidden'); 
                }
                else {
                    console.log("Showing Home Section.");
                    homeSection.classList.remove('hidden');
                    // Atualiza Gold, Cash, VIP e Fruta Ativa na home
                    characterGoldEl.textContent = characterData.gold;
                    characterCashEl.textContent = characterData.cash;
                    characterVipEl.textContent = characterData.vip ? 'Ativado' : 'Desativado';
                    characterActiveFruitEl.textContent = characterData.activeFruit ? characterData.activeFruit : 'Nenhuma';
                }
            }

            function updateInventoryUI() {
                console.log("updateInventoryUI called with currentUserInventory:", currentUserInventory);
                inventoryGridEl.innerHTML = '';

                currentUserInventory.forEach((item, index) => {
                    const slot = document.createElement('div');
                    slot.classList.add('inventory-slot');

                    const itemDiv = document.createElement('div');
                    itemDiv.classList.add('inventory-item');
                    itemDiv.textContent = `${item.item} (${item.quantity})`;
                    itemDiv.setAttribute('draggable', 'true');
                    itemDiv.dataset.index = index;
                    slot.appendChild(itemDiv);
                    inventoryGridEl.appendChild(slot);
                });

                for (let i = currentUserInventory.length; i < INVENTORY_LIMIT; i++) {
                    const slot = document.createElement('div');
                    slot.classList.add('inventory-slot');
                    inventoryGridEl.appendChild(slot);
                }
            }

            // --- Funções para Habilidades ---
            function updateSkillsUI() {
                learnedSkillsGridEl.innerHTML = '';
                availableSkillsGridEl.innerHTML = '';
                updateActiveSkillsSlotsUI();

                characterData.learnedSkills.forEach(skill => {
                    const skillCard = createSkillCard(skill, true);
                    learnedSkillsGridEl.appendChild(skillCard);
                });

                allSkillsData.forEach(skill => {
                    const isLearned = characterData.learnedSkills.some(learnedSkill => learnedSkill._id === skill._id);
                    if (skill.class.includes(characterData.class) && !isLearned) {
                        const skillCard = createSkillCard(skill, false);
                        availableSkillsGridEl.appendChild(skillCard);
                    }
                });
            }

            function createSkillCard(skill, isLearned) {
                const skillCard = document.createElement('div');
                skillCard.classList.add('skill-card', 'rounded-lg', 'p-4', 'shadow-md', 'flex', 'flex-col', 'justify-between');
                if (isLearned) {
                    skillCard.classList.add('learned');
                }
                const isActive = characterData.activeSkills.some(activeSkill => activeSkill._id === skill._id);
                if (isLearned && !isActive) {
                    skillCard.setAttribute('draggable', 'true');
                    skillCard.dataset.skillId = skill._id;
                }
                if (isActive) {
                    skillCard.classList.add('active');
                }

                skillCard.innerHTML = `
                    <div>
                        <h4 class="text-lg font-bold text-yellow-400 mb-2">${skill.name}</h4>
                        <p class="text-sm text-gray-300 mb-1">Nível Requerido: ${skill.requiredLevel}</p>
                        <p class="text-sm text-gray-400">${skill.description}</p>
                    </div>
                    ${isLearned ? '' : `<button class="mt-4 learn-skill-btn" data-skill-id="${skill._id}" ${characterData.level < skill.requiredLevel ? 'disabled' : ''}>
                        ${characterData.level < skill.requiredLevel ? `Nível ${skill.requiredLevel} Requerido` : 'Aprender'}
                    </button>`}
                `;

                if (!isLearned) {
                    const learnButton = skillCard.querySelector('.learn-skill-btn');
                    if (learnButton) {
                        learnButton.addEventListener('click', () => learnSkill(skill._id));
                    }
                }
                return skillCard;
            }

            function updateActiveSkillsSlotsUI() {
                activeSkillsSlotsEl.innerHTML = '';
                for (let i = 0; i < ACTIVE_SKILLS_LIMIT; i++) {
                    const slot = document.createElement('div');
                    slot.classList.add('active-skill-slot');
                    slot.dataset.slotIndex = i;

                    const activeSkill = characterData.activeSkills[i];
                    if (activeSkill) {
                        slot.innerHTML = `
                                <span class="skill-name">${activeSkill.name}</span>
                                <button class="remove-skill-btn" data-skill-id="${activeSkill._id}">X</button>
                            `;
                        const removeBtn = slot.querySelector('.remove-skill-btn');
                        removeBtn.addEventListener('click', () => removeActiveSkill(activeSkill._id));
                    } else {
                        slot.textContent = 'Arrastar habilidade aqui';
                    }
                    activeSkillsSlotsEl.appendChild(slot);
                }
                addDragAndDropListenersToActiveSlots();
            }

            function updateActiveBattleSkillsUI() {
                activeBattleSkillsEl.innerHTML = '';
                const basicAttackSkill = allSkillsData.find(s => s.name === "Atacar");
                if (basicAttackSkill) {
                    const attackButton = document.createElement('button');
                    attackButton.classList.add('btn-pirate', 'skill-battle-btn', 'px-6', 'py-3', 'bg-red-600', 'hover:bg-red-700');
                    attackButton.textContent = basicAttackSkill.name;
                    attackButton.dataset.skillId = basicAttackSkill._id;
                    attackButton.addEventListener('click', () => useSkillInBattle(basicAttackSkill._id));
                    activeBattleSkillsEl.appendChild(attackButton);
                }

                characterData.activeSkills.forEach(skill => {
                    if (skill && skill.name !== "Atacar") {
                        const skillButton = document.createElement('button');
                        skillButton.classList.add('btn-pirate', 'skill-battle-btn', 'px-6', 'py-3');
                        skillButton.textContent = skill.name;
                        skillButton.dataset.skillId = skill._id;

                        const cooldownInfo = characterData.skillCooldowns.find(c => c.skill && c.skill._id === skill._id);
                        if (cooldownInfo && cooldownInfo.turnsRemaining > 0) {
                            skillButton.disabled = true;
                            skillButton.textContent = `${skill.name} (${cooldownInfo.turnsRemaining})`;
                        } else {
                            skillButton.disabled = false;
                        }

                        skillButton.addEventListener('click', () => useSkillInBattle(skill._id));
                        activeBattleSkillsEl.appendChild(skillButton);
                    }
                });
            }

            let draggedSkillId = null;

            learnedSkillsGridEl.addEventListener('dragstart', (e) => {
                if (e.target.classList.contains('skill-card') && e.target.dataset.skillId) {
                    draggedSkillId = e.target.dataset.skillId;
                    e.dataTransfer.setData('text/plain', draggedSkillId);
                    e.dataTransfer.effectAllowed = 'move';
                    console.log('Habilidade arrastada:', draggedSkillId);
                }
            });

            function addDragAndDropListenersToActiveSlots() {
                document.querySelectorAll('.active-skill-slot').forEach(slot => {
                    slot.addEventListener('dragover', (e) => {
                        e.preventDefault();
                        e.dataTransfer.dropEffect = 'move';
                        slot.classList.add('drag-over');
                    });

                    slot.addEventListener('dragleave', () => {
                        slot.classList.remove('drag-over');
                    });

                    slot.addEventListener('drop', async (e) => {
                        e.preventDefault();
                        slot.classList.remove('drag-over');

                        if (draggedSkillId) {
                            const targetSlotIndex = parseInt(slot.dataset.slotIndex);
                            await setActiveSkill(draggedSkillId, targetSlotIndex);
                            draggedSkillId = null;
                        }
                    });
                });
            }

            async function learnSkill(skillId) {
                try {
                    const response = await fetch('/skills/learn', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ skillId })
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);
                        characterData = data.character;
                        updateSkillsUI();
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    console.error('Erro ao aprender habilidade:', error);
                    alert('Erro ao tentar aprender habilidade.');
                }
            }

            async function setActiveSkill(skillId, slotIndex) {
                try {
                    const response = await fetch('/skills/set-active', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ skillId, slotIndex })
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);
                        characterData = data.character;
                        updateSkillsUI();
                        updateActiveBattleSkillsUI();
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    console.error('Erro ao definir habilidade ativa:', error);
                    alert('Erro ao tentar definir habilidade ativa.');
                }
            }

            async function removeActiveSkill(skillId) {
                try {
                    const response = await fetch('/skills/remove-active', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ skillId })
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);
                        characterData = data.character;
                        updateSkillsUI();
                        updateActiveBattleSkillsUI();
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    console.error('Erro ao remover habilidade ativa:', error);
                    alert('Erro ao tentar remover habilidade ativa.');
                }
            }

            async function useSkillInBattle(skillId) {
                console.log(`Tentando usar habilidade: ${allSkillsData.find(s => s._id === skillId)?.name}`);
                try {
                    const response = await fetch('/battle/use-skill', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ skillId })
                    });
                    const data = await response.json();

                    if (data.success) {
                        characterData = data.character;
                        updateUI(data.battleState, initialInventoryState, initialSkillsState, initialStatusState); 
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    console.error('Erro ao usar habilidade na batalha:', error);
                    alert('Erro ao tentar usar habilidade na batalha.');
                }
            }


            // Inicializa a UI com os estados vindos do servidor
            const initialBattleState = JSON.parse('<%- JSON.stringify(battleState || null) %>'); 
            const initialInventoryState = JSON.parse('<%- JSON.stringify(inventoryState || null) %>');
            const initialSkillsState = JSON.parse('<%- JSON.stringify(skillsState || null) %>');
            const initialStatusState = JSON.parse('<%- JSON.stringify(statusState || null) %>'); 
            
            updateUI(initialBattleState, initialInventoryState, initialSkillsState, initialStatusState);


            startBattleBtn.addEventListener('click', async () => {
                console.log("Botão Batalha Naval clicado. Redirecionando para /battle/start");
                window.location.href = '/battle/start'; 
            });

            showInventoryBtn.addEventListener('click', () => {
                console.log("Botão Inventário clicado. Redirecionando para /inventory/show");
                window.location.href = '/inventory/show';
            });

            showSkillsBtn.addEventListener('click', () => {
                console.log("Botão Habilidades clicado. Redirecionando para /skills/show");
                window.location.href = '/skills/show';
            });

            showStatusBtn.addEventListener('click', () => {
                console.log("Botão Status clicado. Redirecionando para /status");
                window.location.href = '/status';
            });


            fleeBattleBtn.addEventListener('click', async () => {
                console.log("Botão Fugir da Batalha clicado.");
                const response = await fetch('/battle/flee', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();
                if (data.success) {
                    alert(data.message);
                    window.location.href = data.redirectTo;
                } else {
                    alert(data.message);
                }
            });


            returnHomeFromInventoryBtn.addEventListener('click', () => {
                console.log("Botão Voltar para Casa (Inventário) clicado. Redirecionando para /inventory/hide.");
                window.location.href = '/inventory/hide';
            });

            returnHomeFromSkillsBtn.addEventListener('click', () => {
                console.log("Botão Voltar para Casa (Habilidades) clicado. Redirecionando para /skills/hide.");
                window.location.href = '/skills/hide';
            });

            let draggedItem = null;

            inventoryGridEl.addEventListener('dragstart', (e) => {
                if (e.target.classList.contains('inventory-item')) {
                    draggedItem = e.target;
                    e.dataTransfer.setData('text/plain', e.target.textContent);
                    e.dataTransfer.effectAllowed = 'move';
                    console.log("Item arrastado:", e.target.textContent);
                }
            });

            discardAreaEl.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                discardAreaEl.classList.add('drag-over');
            });

            discardAreaEl.addEventListener('dragleave', () => {
                discardAreaEl.classList.remove('drag-over');
            });

            discardAreaEl.addEventListener('drop', async (e) => {
                e.preventDefault();
                discardAreaEl.classList.remove('drag-over');

                if (draggedItem) {
                    const itemText = draggedItem.textContent;
                    const itemIndex = parseInt(draggedItem.dataset.index);

                    currentUserInventory.splice(itemIndex, 1); 
                    console.log("Item descartado:", itemText, "Novo inventário local:", currentUserInventory);

                    if (typeof saveInventoryToBackend === 'function') {
                        await saveInventoryToBackend(currentUserInventory);
                    } else {
                        console.warn("saveInventoryToBackend function is not defined.");
                    }

                    updateInventoryUI();

                    draggedItem = null;
                }
            });
        });
    </script>
</body>
</html>
