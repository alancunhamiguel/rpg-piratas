<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criar Personagem - RPG de Piratas</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Fundo escuro */
            color: #e2e8f0; /* Texto claro */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 1rem;
            overflow: hidden; /* Evita barras de rolagem indesejadas */
        }
        .container {
            background-color: #2d3748;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.5);
            width: 100%;
            max-width: 800px; /* Limita a largura para melhor visualização */
            display: flex;
            gap: 2rem;
        }
        .form-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .preview-section {
            flex: 1;
            background-color: #334155;
            border-radius: 10px;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        #preview-canvas {
            display: block;
            background-color: #334155;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        .btn-pirate {
            background-color: #f6ad55; /* Laranja */
            color: #2d3748; /* Texto escuro */
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: bold;
            transition: background-color 0.3s ease;
            cursor: pointer;
            border: none;
        }
        .btn-pirate:hover {
            background-color: #ed8936; /* Laranja mais escuro no hover */
        }
        .input-field {
            background-color: #4a5568;
            border: 1px solid #667584;
            padding: 0.75rem;
            border-radius: 8px;
            color: white;
        }
        .input-field:focus {
            outline: none;
            border-color: #63b3ed;
            box-shadow: 0 0 0 3px rgba(99, 179, 237, 0.5);
        }
        .error-message {
            color: #e53e3e; /* Vermelho para erros */
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="form-section">
            <h2 class="text-3xl font-bold text-yellow-400 mb-6 text-center">Criar Novo Personagem</h2>

            <% if (messages.error) { %>
                <div class="error-message p-3 bg-red-800 rounded-lg">
                    <%= messages.error %>
                </div>
            <% } %>

            <form action="/create-character" method="POST" class="flex flex-col gap-4">
                <div>
                    <label for="name" class="block text-sm font-medium text-gray-300 mb-1">Nome do Personagem:</label>
                    <input type="text" id="name" name="name" class="input-field w-full" required>
                </div>
                
                <div>
                    <label for="class" class="block text-sm font-medium text-gray-300 mb-1">Classe:</label>
                    <select id="class" name="class" class="input-field w-full" required>
                        <option value="pirata">Pirata</option>
                        <option value="marinheiro">Marinheiro</option>
                        <option value="aventureiro">Aventureiro</option>
                    </select>
                </div>
                
                <button type="submit" class="btn-pirate mt-4">Criar Personagem</button>
            </form>
            <button id="return-home-btn" class="btn-pirate bg-gray-500 hover:bg-gray-700 mt-2">Voltar para Home</button>
        </div>

        <div class="preview-section">
            <h3 class="text-xl font-bold text-yellow-400 mb-4">Pré-visualização</h3>
            <canvas id="preview-canvas" width="144" height="144"></canvas> <div id="preview-info" class="text-center">
                <p>Nome: <span id="preview-name"></span></p>
                <p>HP: <span id="preview-hp"></span></p>
                <p>Ouro: <span id="preview-gold"></span></p>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('preview-canvas');
            const ctx = canvas.getContext('2d');
            const nameInput = document.getElementById('name');
            const classSelect = document.getElementById('class');
            const previewNameEl = document.getElementById('preview-name');
            const previewHpEl = document.getElementById('preview-hp');
            const previewGoldEl = document.getElementById('preview-gold');
            const returnHomeBtn = document.getElementById('return-home-btn');

            const TILE_SIZE = 48; // Tamanho de cada tile
            const FRAME_WIDTH = 48; // Largura de um único quadro do sprite
            const FRAME_HEIGHT = 48; // Altura de um único quadro do sprite

            // Carrega a imagem do sprite do jogador
            const playerImage = new Image();
            playerImage.src = '/player.png'; // Caminho para o sprite sheet do player
            
            playerImage.onerror = () => {
                console.error("Erro ao carregar a imagem do jogador. Verifique o caminho: " + playerImage.src);
            };

            // Mapeamento de direção lógica para a linha do sprite sheet
            const DIRECTION_ROW_MAP = {
                0: 0, // Baixo
                1: 3, // Cima
                2: 1, // Esquerda
                3: 2  // Direita
            };

            // Informações de ação para sprites (usadas para idle)
            const ACTION_INFO = {
                'idle': { rowOffset: 0, frames: 3 }
            };

            // **Valores padrão para o preview de um NOVO personagem**
            let playerPreview = {
                x: 1, // Posição X central para um preview 3x3
                y: 1, // Posição Y central para um preview 3x3
                name: "Novo Personagem",
                hp: 100, // HP inicial padrão
                maxHp: 100, // Max HP inicial padrão
                gold: 0, // Ouro inicial padrão
                direction: 0, // Baixo
                action: 'idle',
                animationFrame: 0,
                animationTimer: 0,
                animationSpeed: 10 // Quadros por segundo para a animação
            };

            function drawPlayerPreview() {
                ctx.clearRect(0, 0, canvas.width, canvas.height); // Limpa o canvas

                // Desenha um fundo simples para o preview
                ctx.fillStyle = '#48bb78'; // Grama
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.strokeStyle = '#333';
                for (let y = 0; y < canvas.height / TILE_SIZE; y++) {
                    for (let x = 0; x < canvas.width / TILE_SIZE; x++) {
                        ctx.strokeRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                    }
                }

                if (playerImage.complete && playerImage.naturalWidth !== 0) {
                    const baseRow = DIRECTION_ROW_MAP[playerPreview.direction];
                    const spriteRow = baseRow + ACTION_INFO[playerPreview.action].rowOffset;
                    
                    const srcX = playerPreview.animationFrame * FRAME_WIDTH;
                    const srcY = spriteRow * FRAME_HEIGHT;

                    ctx.drawImage(
                        playerImage,
                        srcX, srcY, FRAME_WIDTH, FRAME_HEIGHT, // Retângulo de origem no sprite sheet
                        playerPreview.x * TILE_SIZE, playerPreview.y * TILE_SIZE, TILE_SIZE, TILE_SIZE // Retângulo de destino no canvas
                    );
                } else {
                    // Fallback para cor sólida se a imagem não carregar
                    ctx.fillStyle = 'blue';
                    ctx.fillRect(playerPreview.x * TILE_SIZE + 2, playerPreview.y * TILE_SIZE + 2, TILE_SIZE - 4, TILE_SIZE - 4);
                    ctx.strokeStyle = 'white';
                    ctx.lineWidth = 2;
                    ctx.strokeRect(playerPreview.x * TILE_SIZE + 2, playerPreview.y * TILE_SIZE + 2, TILE_SIZE - 4, TILE_SIZE - 4);
                }
            }

            let lastTime = 0;
            function animatePreview(currentTime) {
                if (!lastTime) lastTime = currentTime;
                const deltaTime = currentTime - lastTime;
                lastTime = currentTime;

                playerPreview.animationTimer += deltaTime;
                const framesInAction = ACTION_INFO[playerPreview.action].frames;

                if (playerPreview.animationTimer >= (1000 / playerPreview.animationSpeed)) {
                    playerPreview.animationFrame = (playerPreview.animationFrame + 1) % framesInAction;
                    playerPreview.animationTimer = 0;
                }

                drawPlayerPreview();
                requestAnimationFrame(animatePreview);
            }

            // Inicia a animação do preview quando a imagem carrega
            playerImage.onload = () => {
                requestAnimationFrame(animatePreview);
            };
            if (playerImage.complete) {
                requestAnimationFrame(animatePreview);
            }

            // Atualiza o nome no preview conforme o usuário digita
            nameInput.addEventListener('input', () => {
                playerPreview.name = nameInput.value || "Novo Personagem";
                previewNameEl.textContent = playerPreview.name;
            });

            // Atualiza as informações do preview inicialmente
            previewNameEl.textContent = playerPreview.name;
            previewHpEl.textContent = playerPreview.hp;
            previewGoldEl.textContent = playerPreview.gold;

            returnHomeBtn.addEventListener('click', () => {
                window.location.href = '/home';
            });
        });
    </script>
</body>
</html>
