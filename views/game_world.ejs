<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RPG de Piratas - Mundo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Fundo escuro */
            color: #e2e8f0; /* Texto claro */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 1rem;
            overflow: hidden; /* Evita barras de rolagem indesejadas */
        }
        #game-container {
            position: relative;
            width: 800px; /* Largura fixa para o contêiner do jogo */
            height: 600px; /* Altura fixa para o contêiner do jogo */
            background-color: #2d3748;
            border-radius: 15px;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.5);
            overflow: hidden; /* Garante que o canvas não vaze */
        }
        #game-canvas {
            display: block;
            background-color: #334155; /* Cor de fundo do canvas */
            width: 100%;
            height: 100%;
        }
        #game-ui {
            position: absolute;
            top: 10px;
            left: 10px;
            right: 10px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            pointer-events: none; /* Permite cliques passarem para o canvas */
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
        }
        #game-ui > div {
            background-color: rgba(0, 0, 0, 0.5);
            padding: 8px 12px;
            border-radius: 8px;
            pointer-events: auto; /* Reativa cliques para elementos UI */
        }
        #in-game-inventory-toggle {
            background-color: #4299e1;
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
            pointer-events: auto; /* Reativa cliques */
        }
        #in-game-inventory-toggle:hover {
            background-color: #3182ce;
        }
        #in-game-inventory {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background-color: rgba(45, 55, 72, 0.9); /* Fundo do inventário */
            border: 2px solid #4a5568;
            border-radius: 10px;
            padding: 15px;
            width: 300px;
            max-height: 400px;
            overflow-y: auto;
            display: none; /* Escondido por padrão */
            flex-direction: column;
            gap: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.7);
            pointer-events: auto; /* Reativa cliques */
        }
        #in-game-inventory.active {
            display: flex;
        }
        .inventory-item-in-game {
            background-color: #63b3ed;
            color: white;
            padding: 8px;
            border-radius: 5px;
            text-align: center;
            font-size: 0.9em;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .inventory-item-in-game:hover {
            background-color: #4299e1;
        }

        .chat-container {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 350px;
            background-color: rgba(45, 55, 72, 0.9);
            border-radius: 10px;
            padding: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.7);
            pointer-events: auto;
        }
        .chat-messages {
            height: 120px;
            overflow-y: auto;
            list-style-type: none;
            padding: 0;
            margin-bottom: 10px;
            background-color: #1a202c;
            border-radius: 5px;
            padding: 5px;
        }
        .chat-messages li {
            padding: 2px 0;
            border-bottom: 1px solid #4a5568;
            font-size: 0.85em;
        }
        .chat-messages li:last-child {
            border-bottom: none;
        }
        .chat-message-admin {
            color: #f6e05e; /* Amarelo para admin */
            font-weight: bold;
        }
        .chat-message-system {
            color: #63b3ed; /* Azul claro para sistema */
            font-style: italic;
            font-weight: bold;
        }
        .chat-message-error {
            color: #e53e3e; /* Vermelho para erros */
            font-weight: bold;
        }
        .chat-input-form {
            display: flex;
            gap: 5px;
        }
        .chat-input-form input {
            flex-grow: 1;
            padding: 8px;
            border-radius: 5px;
            background-color: #1a202c;
            border: 1px solid #4a5568;
            color: white;
        }
        .chat-input-form button {
            background-color: #4299e1;
            color: white;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
        }

        #return-home-from-game-btn {
            margin-top: 20px;
            background-color: #e53e3e;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }
        #return-home-from-game-btn:hover {
            background-color: #c53030;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas"></canvas>
        <div id="game-ui">
            <div id="player-info">
                HP: <span id="player-hp"></span> / <span id="player-max-hp"></span><br>
                Ouro: <span id="player-gold"></span>
            </div>
            <button id="in-game-inventory-toggle">Inventário</button>
        </div>

        <div id="in-game-inventory">
            <h3 class="text-xl font-bold mb-3 text-yellow-400">Inventário</h3>
            <div id="inventory-items-list" class="flex flex-col gap-2">
                <!-- Itens serão renderizados aqui -->
            </div>
            <button id="close-inventory-btn" class="btn-pirate mt-4">Fechar</button>
        </div>

        <div class="chat-container">
            <ul class="chat-messages" id="messages"></ul>
            <form class="chat-input-form" id="chat-form">
                <input id="chat-input" type="text" autocomplete="off" placeholder="Digite sua mensagem...">
                <button type="submit">Enviar</button>
            </form>
        </div>
    </div>

    <button id="return-home-from-game-btn">Voltar para Casa</button>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('game-canvas');
            const ctx = canvas.getContext('2d');
            const socket = io();

            const TILE_SIZE = 32; // Tamanho de cada tile em pixels
            const MAP_WIDTH = 20; // Número de tiles na largura do mapa
            const MAP_HEIGHT = 15; // Número de tiles na altura do mapa

            // Ajusta o tamanho do canvas para o tamanho do mapa
            canvas.width = MAP_WIDTH * TILE_SIZE;
            canvas.height = MAP_HEIGHT * TILE_SIZE;

            // Cores para tiles simples (temporário)
            const TILE_COLORS = {
                0: '#48bb78', // Grama
                1: '#8B4513', // Terra
                2: '#63b3ed', // Água
                3: '#a0aec0'  // Pedra
            };

            // Mapa de exemplo (2D array de IDs de tiles)
            const gameMap = [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            ];

            let player = {
                x: 5, // Posição X em tiles
                y: 5, // Posição Y em tiles
                name: "<%= character.name %>", // Nome do personagem do EJS
                color: 'blue', // Cor do personagem
                hp: JSON.parse('<%= character.hp %>'),
                maxHp: JSON.parse('<%= character.maxHp %>'),
                gold: JSON.parse('<%= character.gold %>'),
                inventory: JSON.parse('<%- JSON.stringify(character.inventory) %>') || []
            };

            let otherPlayers = {}; // Para armazenar outros jogadores conectados

            // --- Elementos da UI do Jogo ---
            const playerHpEl = document.getElementById('player-hp');
            const playerMaxHpEl = document.getElementById('player-max-hp');
            const playerGoldEl = document.getElementById('player-gold');
            const inGameInventoryToggle = document.getElementById('in-game-inventory-toggle');
            const inGameInventory = document.getElementById('in-game-inventory');
            const inventoryItemsList = document.getElementById('inventory-items-list');
            const closeInventoryBtn = document.getElementById('close-inventory-btn');
            const returnHomeFromGameBtn = document.getElementById('return-home-from-game-btn');

            // --- Código do Chat (copiado do home.ejs) ---
            const chatMessagesEl = document.getElementById('messages');
            const chatFormEl = document.getElementById('chat-form');
            const chatInputEl = document.getElementById('chat-input');

            chatFormEl.addEventListener('submit', (e) => {
                e.preventDefault();
                if (chatInputEl.value) {
                    socket.emit('chat message', chatInputEl.value);
                    chatInputEl.value = '';
                }
            });

            socket.on('chat message', (msgData) => {
                const item = document.createElement('li');
                let messageText = `${msgData.sender}: ${msgData.message}`;
                
                if (msgData.isAdmin) {
                    item.classList.add('chat-message-admin');
                } else if (msgData.isSystem) {
                    item.classList.add('chat-message-system');
                    messageText = `SISTEMA: ${msgData.message}`;
                }
                
                item.textContent = messageText;
                chatMessagesEl.appendChild(item);
                chatMessagesEl.scrollTop = chatMessagesEl.scrollHeight;
            });

            socket.on('chat error', (errorMessage) => {
                const item = document.createElement('li');
                item.classList.add('chat-message-error');
                item.textContent = `ERRO: ${errorMessage}`;
                chatMessagesEl.appendChild(item);
                chatMessagesEl.scrollTop = chatMessagesEl.scrollHeight;
            });
            // --- Fim do Código do Chat ---

            // Função para desenhar o mapa
            function drawMap() {
                for (let y = 0; y < MAP_HEIGHT; y++) {
                    for (let x = 0; x < MAP_WIDTH; x++) {
                        const tileType = gameMap[y][x];
                        ctx.fillStyle = TILE_COLORS[tileType];
                        ctx.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                        ctx.strokeStyle = '#333'; // Borda para tiles
                        ctx.strokeRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                    }
                }
            }

            // Função para desenhar o jogador
            function drawPlayer(playerToDraw) {
                ctx.fillStyle = playerToDraw.color;
                ctx.fillRect(playerToDraw.x * TILE_SIZE + 2, playerToDraw.y * TILE_SIZE + 2, TILE_SIZE - 4, TILE_SIZE - 4);
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 2;
                ctx.strokeRect(playerToDraw.x * TILE_SIZE + 2, playerToDraw.y * TILE_SIZE + 2, TILE_SIZE - 4, TILE_SIZE - 4);

                // Desenhar nome do jogador
                ctx.fillStyle = 'white';
                ctx.font = '10px Inter';
                ctx.textAlign = 'center';
                ctx.fillText(playerToDraw.name, playerToDraw.x * TILE_SIZE + TILE_SIZE / 2, playerToDraw.y * TILE_SIZE - 5);
            }

            // Função principal de desenho
            function draw() {
                ctx.clearRect(0, 0, canvas.width, canvas.height); // Limpa o canvas
                drawMap();
                drawPlayer(player); // Desenha o jogador local

                // Desenha outros jogadores
                for (const id in otherPlayers) {
                    if (id !== socket.id) { // Não desenha o próprio jogador novamente
                        drawPlayer(otherPlayers[id]);
                    }
                }
            }

            // --- Lógica de Movimento ---
            document.addEventListener('keydown', (e) => {
                let newX = player.x;
                let newY = player.y;

                switch (e.key) {
                    case 'ArrowUp':
                    case 'w':
                        newY--;
                        break;
                    case 'ArrowDown':
                    case 's':
                        newY++;
                        break;
                    case 'ArrowLeft':
                    case 'l':
                        newX--;
                        break;
                    case 'ArrowRight':
                    case 'd':
                        newX++;
                        break;
                }

                // Validação de limites do mapa
                if (newX >= 0 && newX < MAP_WIDTH && newY >= 0 && newY < MAP_HEIGHT) {
                    // Simples verificação de colisão com tiles não-caminháveis (ex: água ou pedra)
                    const targetTileType = gameMap[newY][newX];
                    if (targetTileType !== 2 && targetTileType !== 3) { // 2=Água, 3=Pedra (exemplo de tile bloqueável)
                        player.x = newX;
                        player.y = newY;
                        socket.emit('player_move', { x: player.x, y: player.y }); // Envia nova posição ao servidor
                        draw(); // Redesenha imediatamente para feedback visual
                    }
                }
            });

            // --- Socket.IO para Multiplayer ---
            socket.on('connect', () => {
                console.log('Conectado ao servidor de jogo:', socket.id);
                // Envia a posição inicial do jogador e nome
                socket.emit('player_join', {
                    x: player.x,
                    y: player.y,
                    name: player.name,
                    color: player.color,
                    hp: player.hp,
                    maxHp: player.maxHp,
                    gold: player.gold
                });
            });

            socket.on('current_players', (players) => {
                console.log('Jogadores atuais:', players);
                otherPlayers = players;
                draw();
            });

            socket.on('player_moved', (playerData) => {
                // Atualiza a posição de outro jogador
                otherPlayers[playerData.id] = {
                    x: playerData.x,
                    y: playerData.y,
                    name: playerData.name,
                    color: playerData.color,
                    hp: playerData.hp,
                    maxHp: playerData.maxHp,
                    gold: playerData.gold
                };
                draw();
            });

            socket.on('player_disconnected', (id) => {
                console.log('Jogador desconectado:', id);
                delete otherPlayers[id];
                draw();
            });

            // --- UI do Inventário In-Game ---
            function updateInGameInventoryUI() {
                inventoryItemsList.innerHTML = '';
                if (player.inventory.length === 0) {
                    inventoryItemsList.innerHTML = '<p class="text-gray-400">Inventário vazio.</p>';
                } else {
                    player.inventory.forEach(item => {
                        const itemDiv = document.createElement('div');
                        itemDiv.classList.add('inventory-item-in-game');
                        itemDiv.textContent = `${item.item} (${item.quantity})`;
                        inventoryItemsList.appendChild(itemDiv);
                    });
                }
            }

            inGameInventoryToggle.addEventListener('click', () => {
                inGameInventory.classList.toggle('active');
                updateInGameInventoryUI(); // Atualiza sempre que abre
            });

            closeInventoryBtn.addEventListener('click', () => {
                inGameInventory.classList.remove('active');
            });

            // --- Atualiza info do jogador na UI ---
            function updatePlayerInfoUI() {
                playerHpEl.textContent = player.hp;
                playerMaxHpEl.textContent = player.maxHp;
                playerGoldEl.textContent = player.gold;
            }

            // Listener para o botão "Voltar para Casa"
            returnHomeFromGameBtn.addEventListener('click', () => {
                window.location.href = '/home'; // Redireciona de volta para a home
            });

            // Inicializa o desenho e a UI
            draw();
            updatePlayerInfoUI();
        });
    </script>
</body>
</html>
